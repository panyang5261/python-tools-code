
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>引入头文件<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#include <stdio.h>   //使用了标准库函数 printf(),scanf()
#include <stdlib.h>  //使用了动态内存分配函数 malloc(),free()

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>自定义符号常量<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#define OVERFLOW -2         //内存溢出错误常量
#define OK 1                //表示操作正确的常量
#define ERROR 0             //表示操作错误的常量
#define TRUE 1              //表示逻辑为真的常量
#define FALSE 0             //表示逻辑为假的常量

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>自定义数据类型<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

typedef int Status;       //用typedef给int起个别名，也便于程序的维护
typedef float QElemType;    //用typedef给float起个别名，也便于程序的维护

typedef struct  QNode{  //链队列的C语言表示
	 QElemType data;        //数据域
	 struct QNode * next;   //指针域
}QNode,* QueuePtr;

typedef struct{
	QueuePtr front;  //队头指针
	QueuePtr rear;   //队尾指针
}LinkQueue;


QueuePtr MallocQNode(){
	QueuePtr p;
	if(!(p = (QueuePtr)malloc(sizeof(QNode)))){
		printf("内存分配失败，程序即将退出！\n");
		exit(OVERFLOW);
	}
	return p;
}

/*
	函数：InputQueueElem
	参数：LinkQueue &Q 链队列引用
	返回值：状态码，操作成功返回OK
	作用：为链队列Q输入n个元素
*/
Status InputQueueElem(LinkQueue &Q){

	//工作指针p
	QueuePtr p, q;

	//接收从键盘上输入的新的队列结点元素
	QElemType e;

	//n是队列将要存储元素的个数，也就是队列的长度
	//i是个临时变量，供循环使用
	int n, i;

	//先确定队列中要初始化多少个元素n
	printf("您想为链队列输入几个元素   ");
	scanf("%d", &n);

	//为队列初始化每一个元素
	printf("请依次输入所有元素，用空格隔开:\n");
	for(i = 0; i < n; i++){

		//step1:申请新结点内存空间并使p指向此结点
		p = MallocQNode();
		scanf("%f", &e);

		//step2:从键盘接收元素值并存入新结点的数据域
		p->data = e;

		//step3:将新结点添加到队尾
        Q.rear->next = p;

        //step4:修正尾指针的位置，使尾指针指向p指向的新添加的结点
		Q.rear = p;
	}//for

	//step5:新插入的结点后面没有结点，所以将其设为NULL
	Q.rear->next = NULL;

	//step6:将计数器修改为初始化元素的个数
	Q.front->data = n;

	//操作成功
	return OK;
}//InputQueueElem

/*
	函数：InitQueue
	参数：LinkQueue &Q 链队列引用
	返回值：状态码，操作成功返回OK
	作用：构建一个空队列 Q
*/
Status InitQueue(LinkQueue &Q) {
	//申请头结点的内存空间，并使队头和队尾指针同时指向它
	Q.front = Q.rear = (QueuePtr)malloc(sizeof(QNode));
    if (!Q.front)
        exit (OVERFLOW)
	//由于头结点刚刚初始化，后面还没有元素结点
	Q.front->next = NULL;
	//头结点数据域记录了链队列长度
	//由于此时链队列没有数据节点，所以将头结点数据域设为0
	Q.front->data = 0;

	return OK;
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>2.销毁链队列<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
	函数：DestoryQueue
	参数：LinkQueue &Q 链队列引用
	返回值：状态码，操作成功返回OK
	作用：销毁队列Q
*/
Status DestoryQueue(LinkQueue &Q){

	//从头结点开始向后逐个释放结点内存空间
	while(Q.front){ //while(Q.front) <=> while(Q.front != NULL)

		//队尾指针指向被删除结点的后继结点
		Q.rear = Q.front->next;

		//释放Q.front指向的被删除结点的空间
		free(Q.front);

		//队头指针后移，指向下一个待删除结点
		Q.front = Q.rear;
	}//while

	return OK;
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>>3.判断链队列是否为空<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
	函数：QueueEmpty
	参数：LinkQueue Q 链队列Q
	返回值：状态码，若Q为空队列，则返回TRUE;否则返回FALSE
	作用：判断队列Q是否为空
*/
Status QueueEmpty(LinkQueue Q){

	//队头指针和队尾指针均指向链队列头结点表示链队列为空
	if(Q.rear == Q.front){
		printf("该队列是空队列！\n");
		return TRUE;
	}
	else {
		return FALSE;
	}
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>4.获取链队列的长度<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
	函数：QueueLength
	参数：LinkQueue Q 链队列Q
	返回值：队列Q中的数据元素个数，即队列长度
	作用：获取队列Q长度
*/
int QueueLength(LinkQueue Q) {
	//队列长度保存在链队列头结点的数据域中
	return Q.front->data;
}//QueueLength

//>>>>>>>>>>>>>>>>>>>>5.在链队列中插入元素（入队）<<<<<<<<<<<<<<<<<<<<<<<<

/*
	函数：EnQueue
	参数：LinkQueue &Q 链队列Q的引用
	      QElemType e  被插入的元素e
	返回值：状态码，操作成功后返回OK。
	作用：插入元素e为Q的新的队尾元素
*/
Status EnQueue(LinkQueue &Q, QElemType e){
	//申请一个新的结点，并使p指向这个新结点
	QueuePtr p = (QueuePtr)malloc(sizeof(QNode));
	if (!p)
	    exit (OVERFLOW)
	//将待插入元素e保存到新结点数据域
	p->data = e;
	//由于新结点要插在队尾，后面没有其他结点，所以后继指针域的值为NULL
	p->next = NULL;
	//将新结点链入到队尾
	//队列要求插入操作只能发生在队尾
	Q.rear->next = p;
	//修正队尾指针，使之指向p所指向的新插入的结点
	Q.rear = p;
	//由于插入一个结点，所以存储在头结点中的队列长度+1
	Q.front->data++;
	//插入操作成功
	return OK;
}

//>>>>>>>>>>>>>>>>>>>>>>>6.在链队列中删除元素（出队）<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
	函数：DeQueue
	参数：LinkQueue &Q 链队列Q的引用
	      QElemType &e 带回被删除结点的元素e
	返回值：状态码，操作成功后返回OK。
	作用：若队列不空,则删除Q的队头元素,用e返回其值
*/
Status DeQueue(LinkQueue &Q, QElemType &e){
	//注意队列为空和队列不存在的区别，队列为空，头结点一定存在，
	//队列不存在时头结点一定不存在
	//对空队列执行出队操作没有意义，出队操作执行前要先检查队列是否为空
	if(QueueEmpty(Q)) {
		return ERROR;
	}

	//工作指针p指向队头第一个结点（不是头结点，是头结点的后继）
	//队列要求删除操作只能发生在队头，所以p指向的就是待删除节点
	QueuePtr p = Q.front->next;
	//保存被删除结点的值
	e = p->data;
	//在删除操作执行前修正队头指针的位置，使之在删除结点后指向新的队头结点
	Q.front->next = p->next;
	//若被删除结点恰好是队尾结点，那么该结点被删除后，队列将会变成空队列
	//此时刚好满足空队列条件：Q.rear == Q.front，所以要修正队尾指针的位置，使之指向头结点
	if(Q.rear == p) {
	    Q.rear = Q.front;
	}
	//在队头指针和队尾指针的位置都调整好了之后就可以
	//放心地释放p指向的结点的内存空间了
	free(p);
	Q.front->data--;
	return OK;
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>7.置空链队列<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
	函数：ClearQueue
	参数：LinkQueue &Q 链队列Q的引用
	返回值：状态码，操作成功后返回OK。
	作用：若队列不空,则清空Q
*/
Status ClearQueue(LinkQueue &Q){
	//对空队列进行清空操作没有意义，所以要先判断队列是否为空
	//注意队列为空和队列不存在的区别，队列为空，头结点一定存在，
	//队列不存在时头结点一定不存在
	if(QueueEmpty(Q)) { //if(QueueEmpty(Q)) <=> if(QueueEmpty(Q) != TRUE)
		return ERROR;
	}

	//工作指针p指向队头结点（不是头结点），q是临时变量
	QueuePtr p = Q.front->next, q;
	//从队头依次删除每个结点
    while(p){
    	//使得q指向p指向结点的后继结点
    	q = p->next;
    	//释放掉p指向结点的空间
    	free(p);
    	//p向后移动，指向被删除结点的后继结点，该结点成为新的删除目标
		p = q;
    }
    //队列清空后头结点后面没有结点
    Q.front->next = NULL;
    //此时队列为空队列，所以队头指针和队尾指针都指向头结点
    Q.rear = Q.front;
    //由于队列中的数据节点被清空，所以头结点存储的队列长度清零
    Q.front->data = 0;
	//队列清空操作成功
    printf("链队列已清空，长度为：%d\n",QueueLength(Q));
	return OK;
}//ClearQueue

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>8.遍历整个链队列<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
	函数：Print
	参数：ElemType e 被访问的元素
	返回值：状态码，操作成功返回OK，操作失败返回ERROR
	作用：访问元素e的函数，通过修改该函数可以修改元素访问方式，
	      该函数使用时需要配合遍历函数一起使用。
*/
Status Print(QElemType e){

	//指定元素的访问方式是控制台打印输出
	printf("%6.2f    ",e);

	//操作成功
	return OK;
}//Print

/*
	函数：QueueTraverse
	参数：LinkQueue Q 链队列Q
	      Status (* visit)(QElemType) 函数指针，指向元素访问函数。
	返回值：状态码，操作成功返回OK，操作失败返回ERROR
	作用：调用元素访问函数按出队顺序完成链队列的遍历，但并未真正执行出队操作
*/
Status QueueTraverse(LinkQueue Q, Status (* visit)(QElemType)) {

    //对空队列进行遍历操作没有意义，所以遍历操作前要先判断队列是否为空
    //注意队列为空和队列不存在的区别，队列为空，头结点一定存在，
	//队列不存在时头结点一定不存在
	if(QueueEmpty(Q)) { //if(QueueEmpty(Q)) <=> if(QueueEmpty(Q) != TRUE)
	    return ERROR;
	}//if

	//工作指针p指向队头结点
	QueuePtr p = Q.front->next;

	//从队头结点开始依次访问每个结点，直到队尾
	while(p) { //while(p)  <=>  while(p != NULL)

		//调用元素访问函数
		if(!visit(p->data)) {
			printf("输出发生错误！\n");
			return ERROR;
		}//if

		//工作指针p后移，指向下一个元素
		p = p->next;
	}//while

	//输出换行，使结果清楚美观
	printf("\n");

	//操作成功
	return OK;
}//QueueTraverse

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>9.获取队头元素的值<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
	函数：GetHead
	参数：LinkQueue Q 链队列Q
	      QElemType &e 带回队头元素的值
	返回值：状态码，操作成功返回OK，操作失败返回ERROR
	作用：获取队列Q的队头结点元素值，并用e返回该值，此操作不会导致出队操作
*/
Status GetHead(LinkQueue Q, QElemType &e){

	//对空队列进行获取队头操作没有意义，所以操作前要先判断队列是否为空
    //注意队列为空和队列不存在的区别，队列为空，头结点一定存在，
	//队列不存在时头结点一定不存在
	if(QueueEmpty(Q)) { //if(QueueEmpty(Q)) <=> if(QueueEmpty(Q) != TRUE)
	    return ERROR;
	}
	//保存队头结点元素的值
	//Q.front->next指示的是头结点后面的队头结点
	e = Q.front->next->data;
	//操作成功
	return OK;
}


#define MAXSIZE 100
typedef struct {
    QElemType *base;
    int front;
    int rear;
}SqQueue;


Status InitQueue(SqQueue &Q){
    Q.base = (QElemType*)malloc(MAXSIZE * sizeof(QElemType));
    Q.rear = Q.front = 0;
    return OK;
}


Status EnQueue(SqQueue &Q, QElemType e){
    if((Q.rear + 1) % MAXSIZE == Q.front)
        return ERROR;

    Q.base[Q.rear] = e;
    Q.rear = (Q.rear + 1) % MAXSIZE;
    return OK;
}

Status DeQueue(SqQueue &Q, QElemType &e){
    if(Q.front == Q.rear)
        return ERROR;

    e = Q.base[Q.front];
    Q.front = (Q.front + 1) % MAXSIZE;
    return OK;
}
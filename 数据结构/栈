
#include "stack.hpp"

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>自定义数据类型<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

typedef int Status;       //用typedef给int起个别名，也便于程序的维护
typedef int SElemType;   //用typedef给int起个别名，也便于程序的维护
typedef struct {     //栈的顺序存储表示
    SElemType *base;            //栈底指针，在栈构造之前和销毁之后，base的值为NULL
    SElemType *top;             //栈顶指针
    int stacksize;              //当前已分配的存储空间，以元素为单位
}SqStack;


//-------------------------------------------顺序栈的主要操作-----------------------------------------

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>1.初始化顺序栈<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
 函数：InitStack_Sq
 参数：SqStack &S 顺序栈引用
 */
Status InitStack_Sq(SqStack &S){
    //动态申请顺序栈的内存空间，并检查内存空间是否成功分配
    if(!(S.base = (SElemType *)malloc(STACK_INIT_SIZE * sizeof(SElemType)))){
        printf("内存分配失败，程序即将退出！\n");
        exit(OVERFLOW);
    }
    //由于刚动态分配完的栈是空栈，所以栈顶指针和栈底指针都指向栈底
    S.top = S.base;
    //栈的大小就是栈的初始化大小参数STACK_INIT_SIZE
    S.stacksize = STACK_INIT_SIZE;
    //操作成功
    return OK;
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>2.销毁顺序栈<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
 函数：DestoryStack_Sq
 参数：SqStack &S 顺序栈引用
 作用：释放顺序栈S所占内存空间
 */
Status DestoryStack_Sq(SqStack &S){

    //栈底指针保存的是顺序栈内存空间的首地址
    free(S.base);

    //操作成功
    printf("顺序栈内存释放成功！\n");
    return OK;
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>3.置空顺序栈<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
 函数：ClearStack_Sq
 参数：SqStack &S 顺序栈引用
 返回值：状态码，OK表示操作成功
 作用：将顺序栈S中的元素清空
 */
Status ClearStack_Sq(SqStack &S){

    //只需要重新设置栈顶指针到初始位置，保留现有空间
    //栈顶指针和栈底指针都指向栈底表示此栈是空栈
    S.top = S.base;

    //操作成功
    return OK;
}//ClearStack_Sq

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>4.判断顺序栈是否为空<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
 函数：StackIsEmpty_Sq
 参数：SqStack S 顺序栈S
 返回值：若顺序栈S是空栈返回1，否返回0
 作用：判断顺序栈S是否为空栈
 */
Status StackIsEmpty_Sq(SqStack S){
    //栈顶指针和栈底指针都指向栈底表示此栈是空栈
    return S.top == S.base;
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>5.获取顺序栈的长度<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
 函数：StackLength_Sq
 参数：SqStack S 顺序栈S
 返回值：若顺序栈S是空栈返回1，否返回0
 作用：判断顺序栈S是否为空栈
 */
Status StackLength_Sq(SqStack S){

    //栈的长度就是栈顶指针和栈底指针之间的元素个数
    return (S.top - S.base);
}//StackLength_Sq

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>6.获得栈顶元素的值<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
 函数：GetTop
 参数：SqStack S 顺序栈S
 返回值：成功获取顺序栈S栈顶元素的值后返回OK，否则返回ERRROR
 作用：用e返回栈顶元素的值，但是栈顶元素不做出栈操作
 */
Status GetTop(SqStack S, SElemType &e){

    //空栈没有栈顶元素，所以要先判断栈是否为空
    //注意栈是否为空和栈是否存在不是一个概念，所以不可以用
    //S.base != NULL判断栈是否为空
    if(StackIsEmpty_Sq(S)) {
        return ERROR;
    }//if

    //注意：栈顶指针指向栈顶元素的下一个位置
    e = *(S.top - 1);
    /*   注意：此处不能使用“e = *(--S.top); ”的原因
     1. --S.top自减操作改变了栈顶指针本身的指向，使得该指针向前移动一位，相当于删除了原来栈中的最后一个元素（最后一个元素出栈）；
     2. S.top-1 仅仅表示栈顶指针的上一个位置，并没有改变S.top的值，*(S.top-1)表示取栈顶指针前一个位置的值，即栈顶元素的值
     3. 这两种写法造成的结果是不同的，如果是纯代数运算，两者没有差别,但在指向数组
     （顺序结构在C语言中是用一维数组描述的）的指针变量运算中，这两个表达式有特殊含义
     在指针运算中，“指针变量-1 ”表示该指针变量所指位置的前一个位置，
     这种做法并不改变指针变量本身的值。
     --指针变量   不仅使得该指针指向原来所指位置的上一个位置, 还修改了指针变量本身的值
     在栈中，栈顶指针和栈底指针所指向的位置有特殊的含义，故两者不等价。
     */
    //操作成功
    return OK;
}//GetTop_Sq

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>7.在顺序栈中插入元素（入栈）<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
 函数：ReallocStack_Sq
 参数：SqStack &S 顺序栈S引用
 返回值：状态码，操作成功返回OK，否则返回ERRROR
 作用：将栈S扩容，每扩容一次，栈的大小增加STACKINCREMENT
 */
Status ReallocStack_Sq(SqStack &S){

    //为顺序栈重新分配内存(扩容)，扩展的空间大小是STACKINCREMENT
    /*if(!(S.base = (SElemType *)realloc(S.base,
     (STACK_INIT_SIZE + STACKINCREMENT) * sizeof(SElemType))))
     这句代码相当于：
     S.base = (SElemType *)realloc(S.base,
     (STACK_INIT_SIZE + STACKINCREMENT) * sizeof(SElemType));
     if(!S.base) <=> if(S.base == NULL)
     */
    if(!(S.base = (SElemType *)realloc(S.base,
                                       (STACK_INIT_SIZE + STACKINCREMENT) * sizeof(SElemType)))){
        printf("内存分配失败，程序即将退出！\n");
        exit(OVERFLOW);
    }//if

    //由于扩容前栈已经满了，所以栈顶指针位置就是栈底指针+原来栈的大小
    S.top = S.base + S.stacksize;

    //扩容后，栈的大小增加了STACKINCREMENT
    S.stacksize += STACKINCREMENT;

    //操作成功
    printf("顺序栈S所需内存已重新分配成功！\n");
    return OK;
}

/*
 函数：Push_Sq
 参数：SqStack &S 顺序栈引用
 SElemType e 被插入的元素e
 返回值：成功获取顺序栈S栈顶元素的值后返回OK，否则返回ERRROR
 作用：（入栈、压栈）插入元素e为新的栈顶元素
 */
Status Push_Sq(SqStack &S, SElemType e){

    //入栈时发现栈满了，就要追加存储空间（扩容）
    if(S.top - S.base >= S.stacksize) {
        //调用扩容函数
        ReallocStack_Sq(S);
    }
    //插入前，栈顶指针指向当前栈顶元素的下一个位置
    //将e赋值给栈顶指针所指存储空间（插入元素e），栈顶指针后移
    //*S.top++ = e;  <=>  *(S.top) = e;  S.top++;
    *S.top++ = e;
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>8.在顺序栈中删除元素（出栈）<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
 函数：Pop_Sq
 参数：SqStack &S 顺序栈引用
 SElemType &e 带回被删除的元素值e
 返回值：删除成功返回OK，否则返回ERRROR
 作用：（出栈，弹栈）若栈不空，则删除S的栈顶元素，用e返回其值
 */
Status Pop_Sq(SqStack &S, SElemType &e){
    //在空栈中执行出栈操作没有意义，所以要判断栈是否为空
    //注意栈是否为空和栈是否存在不是一个概念，所以不可以用
    //S.base != NULL判断栈是否为空

    if (S.top==S.base)
        return ERROR

    //删除前，栈顶指针指向当前栈顶元素的下一个位置
    //--S.top;之后，栈顶指针刚好指向被删除元素
    //栈顶指针前移，保存被删除的元素值到e
    //e=*--S.top;  <=>  --S.top;   e=*(S.top);
    e = *--S.top;

    //操作成功
    return OK;
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>9.遍历整个顺序栈<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*
 函数：Print
 参数：ElemType e 被访问的元素
 返回值：状态码，操作成功返回OK，操作失败返回ERROR
 作用：访问元素e的函数，通过修改该函数可以修改元素访问方式，
 该函数使用时需要配合遍历函数一起使用。
 */
Status Print(SElemType e){
    printf("%5d  ", e);
    return OK;
}

/*
 函数：StackTraverse_Sq
 参数：SqStack S 顺序栈S
 Status(* visit)(SElemType) 函数指针，指向元素访问函数。
 返回值：状态码，操作成功返回OK，操作失败返回ERROR
 作用：调用元素访问函数按出栈顺序完成顺序栈的遍历，但并未真正执行出栈操作
 */
Status StackTraverse_Sq(SqStack S, Status(* visit)(SElemType)) {
    //在空栈中执行遍历操作没有意义，所以要判断栈是否为空
    //注意栈是否为空和栈是否存在不是一个概念，所以不可以用
    //S.base != NULL判断栈是否为空
    if(StackIsEmpty_Sq(S)) {
        printf("此栈是空栈");
        return ERROR;
    }
    //调用元素访问函数依次访问栈中的每个元素
    for(int i = 0; i < StackLength_Sq(S); ++i){
        //调用元素访问函数，一旦访问失败则退出
        if(!visit(S.base[i])) {
            return ERROR;
        }
    }

    //操作成功
    return OK;
}
